Add support for weak dependencies:

A) use RPMTAG_SUGGESTS and RPMTAG_ENHANCES to store them.

   This is different to upstream, which uses RPMSENSE_MISSINGOK
   and RPMTAG_REQUIRES/RPMTAG_PROVIDES instead. I chose different
   tags because I wanted to be compatible. The point is that
   applications that don't know about the new MISSINGOK semantics
   will mis-interpret the provides/requires otherwise, which
   I deemed to risky.

B) use RPMSENSE_STRONG to support a "strong" version, "Recommends"
   instead of "Suggests" and "Supplements" instead of "Enhances".

Needs extcond.diff for query operations.

--- a/build/parsePreamble.c.orig	2011-01-25 13:52:28.000000000 +0000
+++ b/build/parsePreamble.c	2011-05-11 14:09:07.000000000 +0000
@@ -341,6 +341,8 @@ static struct tokenBits_s const installS
     { "verify",		RPMSENSE_SCRIPT_VERIFY },
     { "pretrans",	RPMSENSE_PRETRANS },
     { "posttrans",	RPMSENSE_POSTTRANS },
+    { "hint", 		RPMSENSE_MISSINGOK },
+    { "strong", 	RPMSENSE_STRONG },
     { NULL, 0 }
 };
 
@@ -792,6 +794,18 @@ static rpmRC handlePreambleTag(rpmSpec s
 	if (parseRCPOT(spec, spec->sourcePackage, field, tag, 0, tagflags))
 	    goto exit;
 	break;
+    case RPMTAG_SUGGESTSFLAGS:
+    case RPMTAG_ENHANCESFLAGS:
+    case RPMTAG_BUILDSUGGESTS:
+    case RPMTAG_BUILDENHANCES:
+	tagflags = RPMSENSE_MISSINGOK;
+	if (macro && (!strcmp(macro, "recommends") || !strcmp(macro, "buildrecommends")))
+	    tagflags |= RPMSENSE_STRONG;
+	if (macro && (!strcmp(macro, "supplements") || !strcmp(macro, "buildsupplements")))
+	    tagflags |= RPMSENSE_STRONG;
+	if ((rc = parseRCPOT(spec, pkg, field, tag, 0, tagflags)))
+	    return rc;
+	break;
     case RPMTAG_EXCLUDEARCH:
     case RPMTAG_EXCLUSIVEARCH:
     case RPMTAG_EXCLUDEOS:
@@ -900,6 +914,14 @@ static struct PreambleRec_s const preamb
     {RPMTAG_BUGURL,		0, 0, LEN_AND_STR("bugurl")},
     {RPMTAG_COLLECTIONS,	0, 0, LEN_AND_STR("collections")},
     {RPMTAG_ORDERFLAGS,		2, 0, LEN_AND_STR("orderwithrequires")},
+    {RPMTAG_SUGGESTSFLAGS,	0, 0, LEN_AND_STR("recommends")},
+    {RPMTAG_SUGGESTSFLAGS,	0, 0, LEN_AND_STR("suggests")},
+    {RPMTAG_ENHANCESFLAGS,	0, 0, LEN_AND_STR("supplements")},
+    {RPMTAG_ENHANCESFLAGS,	0, 0, LEN_AND_STR("enhances")},
+    {RPMTAG_BUILDSUGGESTS,	0, 0, LEN_AND_STR("buildrecommends")},
+    {RPMTAG_BUILDSUGGESTS,	0, 0, LEN_AND_STR("buildsuggests")},
+    {RPMTAG_BUILDENHANCES,	0, 0, LEN_AND_STR("buildsupplements")},
+    {RPMTAG_BUILDENHANCES,	0, 0, LEN_AND_STR("buildenhances")},
     {0, 0, 0, 0}
 };
 
diff -p -up ./build/rpmfc.c.orig ./build/rpmfc.c
--- a/build/parseReqs.c.orig	2010-12-13 14:01:56.000000000 +0000
+++ b/build/parseReqs.c	2011-05-11 14:16:43.000000000 +0000
@@ -92,6 +92,20 @@ rpmRC parseRCPOT(rpmSpec spec, Package p
     case RPMTAG_BUILDCONFLICTS:
 	nametag = RPMTAG_CONFLICTNAME;
 	break;
+    case RPMTAG_SUGGESTSFLAGS:
+	nametag = RPMTAG_SUGGESTSNAME;
+	break;
+    case RPMTAG_ENHANCESFLAGS:
+	nametag = RPMTAG_ENHANCESNAME;
+	break;
+    case RPMTAG_BUILDSUGGESTS:
+	nametag = RPMTAG_SUGGESTSNAME;
+	h = spec->buildRestrictions;
+	break;
+    case RPMTAG_BUILDENHANCES:
+	nametag = RPMTAG_ENHANCESNAME;
+	h = spec->buildRestrictions;
+	break;
     }
 
     for (r = field; *r != '\0'; r = re) {
diff -p -up ./configure.ac.orig ./configure.ac
--- a/build/reqprov.c.orig	2010-12-13 14:01:56.000000000 +0000
+++ b/build/reqprov.c	2011-05-11 14:15:02.000000000 +0000
@@ -81,6 +81,16 @@ int addReqProv(Package pkg, rpmTagVal ta
 	extra = Flags & RPMSENSE_TRIGGER;
 	dsp = &pkg->triggers;
 	break;
+    case RPMTAG_SUGGESTSNAME:
+	versiontag = RPMTAG_SUGGESTSVERSION;
+	flagtag = RPMTAG_SUGGESTSFLAGS;
+	extra = Flags & _ALL_REQUIRES_MASK;
+	break;
+    case RPMTAG_ENHANCESNAME:
+	versiontag = RPMTAG_ENHANCESVERSION;
+	flagtag = RPMTAG_ENHANCESFLAGS;
+	extra = Flags & _ALL_REQUIRES_MASK;
+	break;
     case RPMTAG_REQUIRENAME:
     default:
 	tagN = RPMTAG_REQUIRENAME;
diff -p -up ./lib/rpmtd.h.orig ./lib/rpmtd.h
--- a/lib/rpmtd.h.orig	2010-12-03 12:11:57.000000000 +0000
+++ b/lib/rpmtd.h	2011-05-11 14:00:06.000000000 +0000
@@ -220,6 +220,7 @@ typedef enum rpmtdFormats_e {
     RPMTD_FORMAT_VFLAGS		= 17,	/* file verify flags (int types) */
     RPMTD_FORMAT_EXPAND		= 18,	/* macro expansion (string types) */
     RPMTD_FORMAT_FSTATUS	= 19,	/* file verify status (int types) */
+    RPMTD_FORMAT_DEPFLAG_STRONG	= 20,	/* strong dependency (int types) */
 } rpmtdFormats;
 
 /** \ingroup rpmtd
--- a/python/rpmmodule.c.orig	2010-12-03 12:11:57.000000000 +0000
+++ b/python/rpmmodule.c	2011-05-11 14:19:37.000000000 +0000
@@ -376,6 +376,7 @@ static int initModule(PyObject *m)
     REGISTER_ENUM(RPMSENSE_RPMLIB);
     REGISTER_ENUM(RPMSENSE_TRIGGERPREIN);
     REGISTER_ENUM(RPMSENSE_KEYRING);
+    REGISTER_ENUM(RPMSENSE_STRONG);
     REGISTER_ENUM(RPMSENSE_CONFIG);
 
     REGISTER_ENUM(RPMTRANS_FLAG_TEST);
--- a/rpmpopt.in.orig	2011-01-11 07:04:51.000000000 +0000
+++ b/rpmpopt.in	2011-05-11 14:18:47.000000000 +0000
@@ -65,6 +65,22 @@ rpm	alias --requires	--qf \
 	--POPTdesc=$"list capabilities required by package(s)"
 rpm	alias -R --requires
 
+rpm    alias --suggests        --qf \
+  "[%|SUGGESTSFLAGS:depflag_strong?{}:{%{SUGGESTSNAME} %{SUGGESTSFLAGS:depflags} %{SUGGESTSVERSION}\n}|]" \
+	--POPTdesc=$"list capabilities this package suggests"
+
+rpm    alias --recommends      --qf \
+  "[%|SUGGESTSFLAGS:depflag_strong?{%{SUGGESTSNAME} %{SUGGESTSFLAGS:depflags} %{SUGGESTSVERSION}\n}|]" \
+	--POPTdesc=$"list capabilities this package recommends"
+
+rpm    alias --enhances        --qf \
+  "[%|ENHANCESFLAGS:depflag_strong?{}:{%{ENHANCESNAME} %{ENHANCESFLAGS:depflags} %{ENHANCESVERSION}\n}|]" \
+	--POPTdesc=$"list capabilities this package enhances"
+
+rpm    alias --supplements     --qf \
+  "[%|ENHANCESFLAGS:depflag_strong?{%{ENHANCESNAME} %{ENHANCESFLAGS:depflags} %{ENHANCESVERSION}\n}|]" \
+	--POPTdesc=$"list capabilities this package supplements"
+
 rpm	alias --info --qf '\
 Name        : %{NAME}\n\
 %|EPOCH?{Epoch       : %{EPOCH}\n}|\

diff --git a/lib/rpmds.h b/lib/rpmds.h
index bf3ee2c..66bedd2 100644
--- a/lib/rpmds.h
+++ b/lib/rpmds.h
@@ -48,7 +48,7 @@ enum rpmsenseFlags_e {
     RPMSENSE_RPMLIB = (1 << 24),	/*!< rpmlib(feature) dependency. */
     RPMSENSE_TRIGGERPREIN = (1 << 25),	/*!< %triggerprein dependency. */
     RPMSENSE_KEYRING	= (1 << 26),
-    /* bit 27 unused */
+    RPMSENSE_STRONG     = (1 << 27),
     RPMSENSE_CONFIG	= (1 << 28)
 };
 
@@ -68,6 +68,7 @@ typedef rpmFlags rpmsenseFlags;
     RPMSENSE_SCRIPT_POSTUN | \
     RPMSENSE_SCRIPT_VERIFY | \
     RPMSENSE_FIND_REQUIRES | \
+    RPMSENSE_STRONG | \
     RPMSENSE_RPMLIB | \
     RPMSENSE_KEYRING | \
     RPMSENSE_PRETRANS | \
diff -u ./tests/rpmgeneral.at ./tests/rpmgeneral.at
--- ./tests/rpmgeneral.at	2012-03-13 11:30:40.803813509 +0000
+++ ./tests/rpmgeneral.at	2012-03-13 11:30:40.803813509 +0000
@@ -98,6 +98,10 @@
 DISTURL
 DSAHEADER
 E
+ENHANCES
+ENHANCESFLAGS
+ENHANCESNAME
+ENHANCESVERSION
 EPOCH
 EPOCHNUM
 EVR
@@ -252,5 +256,9 @@
 SOURCEPKGID
 SOURCERPM
+SUGGESTS
+SUGGESTSFLAGS
+SUGGESTSNAME
+SUGGESTSVERSION
 SUMMARY
 TRIGGERCONDS
 TRIGGERFLAGS
